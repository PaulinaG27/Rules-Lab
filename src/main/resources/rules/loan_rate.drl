import com.udea.reglas.model.Participant;
global com.udea.reglas.model.Rate rate;

dialect "mvel"

rule "Checking Existing Debt Against Lean amount"
  when
     Participant(loanAmount > (2 * existingDebt))
   then
        rate.setLoanStatus("Rejected - Too Much Debt");
        rate.setLoanRate(999);
    end

rule  "Checking Annual Salary is grater than 50000"
  when
     Participant(annualSalary <= 50000)
   then
      rate.setLoanStatus("Rejected - Too low salary");
      rate.setLoanRate(999);
    end

rule "Checking Credit Score less than 550"
 when
     Participant(creditScore< 550 , annualSalary > 50000 , loanAmount < (2 * existingDebt))
  then
    rate.setLoanStatus("Rejected");
    rate.setLoanRate(999);
  end

rule "Checking Credit Score less than 650"
 when
   Participant(creditScore< 650  && creditScore >=550 , annualSalary > 50000 , loanAmount < (2 * existingDebt))
  then
    rate.setLoanStatus("Approved");
    rate.setLoanRate(7.25);
  end

rule "Checking Credit Score less than 750"
 when
      Participant(creditScore< 750  && creditScore >=650 , annualSalary > 50000 , loanAmount < (2 * existingDebt))
    then
       rate.setLoanStatus("Approved");
       rate.setLoanRate(6.25);
    end

rule "Checking Credit Score greater than 750"
 when
         Participant(creditScore >= 750 , annualSalary > 50000 , loanAmount < (2 * existingDebt))
    then
          rate.setLoanStatus("Approved");
          rate.setLoanRate(5.25);
    end

rule  "Checking Age for Credit Apply"
  when
     Participant(age < 18 || age > 65)
   then
      rate.setLoanStatus("Rejected - Invalid age by policies");
      rate.setLoanRate(999);
    end

rule  "Checking if Participant have job"
  when
     Participant(!haveJob)
   then
      rate.setLoanStatus("Rejected - Participant doesn't have job");
      rate.setLoanRate(999);
    end


rule  "Checking if Participant have judicial backgorund"
  when
     Participant(haveJudicialBackground)
   then
      rate.setLoanStatus("Rejected - Participant is a criminal");
      rate.setLoanRate(999);
    end

rule  "Checking if Participant dependants"
  when
     Participant(quantityDependants > 3)
   then
      rate.setLoanStatus("Rejected - Participant have many dependants");
      rate.setLoanRate(999);
    end
